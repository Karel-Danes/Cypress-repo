name: ðŸ§ª E2E dispatch->
on:
  workflow_dispatch:
    inputs:
      test_feature_branch_version:
        description: "Particular merge request image version"
        required: true
        type: string

      service_name:
        description: "Calling owner repository name"
        required: true
        type: string

      test-case:
        description: "Particular service scenario"
        required: true
        type: string

      randomizer_active:
        description: "Products variants randomizer engaging (yes/no)"
        required: false
        type: boolean

      products_qtty:
        description: "number(=> parseInt()) of simulated product variants"
        required: false
        type: string

      cut_qtty:
        description: "number(=> parseInt()) of db cut product variants"
        required: false
        type: string

      cut_active:
        description: "logic (yes/no) of shortening sequence"
        required: false
        type: boolean

jobs:
  environment-setup:
    runs-on: ubuntu-latest
    outputs:
      loaded-test-case: ${{ steps.dotenv.outputs.test-case }}
      loaded-test-feature-branch-version: ${{ steps.dotenv.outputs.test-feature-branch-version }}
      loaded-service-name: ${{ steps.dotenv.outputs.service-name }}
      loaded-randomizer-active: ${{ steps.dotenv.outputs.randomizer-active }}
      loaded-products-qtty: ${{ steps.dotenv.outputs.product-qtty }}
      loaded-cut-active: ${{ steps.dotenv.outputs.cut-active }}
      loaded-cut-qtty: ${{ steps.dotenv.outputs.cut-qtty }}
      slack-notification: ${{ steps.slack.outputs.ts }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Status check and cache update.
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "inputs ${{ toJSON(inputs) }}"
          echo "event name: ${{github.event_name}}"
          echo "CYPRESS_FEATURE_BRANCH_VERSION=${{ toJSON(github.event.inputs.test_feature_branch_version) }}" >> $GITHUB_ENV
          echo "CYPRESS_SERVICE_NAME=${{ toJSON(github.event.inputs.service_name) }}" >> $GITHUB_ENV
          echo "CYPRESS_RANDOMIZER_ACTIVE=${{ toJSON(github.event.inputs.randomizer_active) }}" >> $GITHUB_ENV
          echo "CYPRESS_PRODUCTS_QTTY=${{ toJSON(github.event.inputs.products_qtty) }}" >> $GITHUB_ENV
          echo "CYPRESS_TEST_CASE=${{ toJSON(github.event.inputs.test_case) }}" >> $GITHUB_ENV
          echo "CYPRESS_CUT_ACTIVE=${{ toJSON(github.event.inputs.cut_active) }}" >> $GITHUB_ENV
          echo "CYPRESS_CUT_QTTY=${{ toJSON(github.event.inputs.cut_qtty) }}" >> $GITHUB_ENV
          echo "E2E_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - id: dotenv-load
        uses: falti/dotenv-action@v1.0.2

      - id: dotenv
        run: |
          cat .env
          echo "test-case=${{ steps.dotenv-load.outputs.CYPRESS_TEST_CASE }}" >> $GITHUB_OUTPUT
          echo "test-feature-branch-version=${{ steps.dotenv-load.outputs.CYPRESS_FEATURE_BRANCH_VERSION }}" >> $GITHUB_OUTPUT
          echo "service-name=${{ steps.dotenv-load.outputs.CYPRESS_SERVICE_NAME }}" >> $GITHUB_OUTPUT
          echo "randomizer-active=${{ steps.dotenv-load.outputs.CYPRESS_RANDOMIZER_ACTIVE }}" >> $GITHUB_OUTPUT
          echo "product-qtty=${{ steps.dotenv-load.outputs.CYPRESS_PRODUCTS_QTTY }}" >> $GITHUB_OUTPUT
          echo "cut-active=${{ steps.dotenv-load.outputs.CYPRESS_CUT_ACTIVE }}" >> $GITHUB_OUTPUT
          echo "cut-qtty=${{ steps.dotenv-load.outputs.CYPRESS_CUT_QTTY }}" >> $GITHUB_OUTPUT

  prod-sync-e2e-run-alza:
    needs: environment-setup
    if: ${{ needs.environment-setup.outputs.loaded-test-case == 'TC_001_e2e_alza' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            build
            node_modules
          key: ${{ runner.os }}-node_modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-build-

      - name: Install root dependencies
        uses: bahmutov/npm-install@v1

      - name: Cypress run (all calling scenarios)
        uses: cypress-io/github-action@v4
        id: cypress-prod-sync-e2e-alza
        with:
          install: false
          browser: electron
          headed: false
          spec: cypress/e2e/${{ needs.environment-setup.outputs.loaded-test-case }}_service/*.**
        # env:
        # CYPRESS_TEST_CASE: ${{needs.environment-setup.outputs.loaded-test-case}}
        # CYPRESS_FEATURE_BRANCH_VERSION: ${{needs.environment-setup.outputs.loaded-test-feature-branch-version}}
        # CYPRESS_RANDOMIZER_ACTIVE: ${{needs.environment-setup.outputs.loaded-randomizer-active}}
        # CYPRESS_PRODUCTS_QTTY: ${{needs.environment-setup.outputs.loaded-products-qtty}}
        # CYPRESS_CUT_ACTIVE: ${{needs.environment-setup.outputs.loaded-cut-active}}
        # CYPRESS_CUT_QTTY: ${{needs.environment-setup.outputs.loaded-cut-qtty}}

      - name: Create artifact package (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-alza.conclusion == 'failure')
        run: tar -cf nonSyncedProducts.tar ./cache_data/nonSyncedProductVariants.json

      - name: Create artifact package (logs)
        if: always()
        run: tar -cf fullLogs.tar ./logs

      - name: Upload artifact (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-alza.conclusion == 'failure')
        uses: actions/upload-artifact@v3
        with:
          name: unsynced-product-variants-for-download
          path: nonSyncedProducts.tar
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload artifact (logs)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-mongo-logs-for-download
          path: fullLogs.tar
          retention-days: 30
          if-no-files-found: ignore

  prod-sync-e2e-run-kaufland:
    needs: environment-setup
    if: ${{ needs.environment-setup.outputs.loaded-test-case == 'TC_002_e2e_kaufland' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            build
            node_modules
          key: ${{ runner.os }}-node_modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-build-

      - name: Install root dependencies
        uses: bahmutov/npm-install@v1

      - name: Cypress run (all calling scenarios)
        uses: cypress-io/github-action@v4
        id: cypress-prod-sync-e2e-kaufland
        with:
          install: false
          browser: electron
          headed: false
          spec: cypress/e2e/${{ needs.environment-setup.outputs.loaded-test-case }}_service/*.**

      - name: Create artifact package (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-kaufland.conclusion == 'failure')
        run: tar -cf nonSyncedProducts.tar ./cache_data/nonSyncedProductVariants.json

      - name: Create artifact package (logs)
        if: always()
        run: tar -cf fullLogs.tar ./logs

      - name: Upload artifact (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-kaufland.conclusion == 'failure')
        uses: actions/upload-artifact@v3
        with:
          name: unsynced-product-variants-for-download
          path: nonSyncedProducts.tar
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload artifact (logs)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-mongo-logs-for-download
          path: fullLogs.tar
          retention-days: 30
          if-no-files-found: ignore

  prod-sync-e2e-run-shoptet:
    needs: environment-setup
    if: ${{ needs.environment-setup.outputs.loaded-test-case == 'TC_003_e2e_shoptet' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            build
            node_modules
          key: ${{ runner.os }}-node_modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-build-

      - name: Install root dependencies
        uses: bahmutov/npm-install@v1

      - name: Cypress run (all calling scenarios)
        uses: cypress-io/github-action@v4
        id: cypress-prod-sync-e2e-shoptet
        with:
          install: false
          browser: electron
          headed: false
          spec: cypress/e2e/${{ needs.environment-setup.outputs.loaded-test-case }}_service/*.**

      - name: Create artifact package (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-shoptet.conclusion == 'failure')
        run: tar -cf nonSyncedProducts.tar ./cache_data/nonSyncedProductVariants.json

      - name: Create artifact package (logs)
        if: always()
        run: tar -cf fullLogs.tar ./logs

      - name: Upload artifact (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-shoptet.conclusion == 'failure')
        uses: actions/upload-artifact@v3
        with:
          name: unsynced-product-variants-for-download
          path: nonSyncedProducts.tar
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload artifact (logs)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-mongo-logs-for-download
          path: fullLogs.tar
          retention-days: 30
          if-no-files-found: ignore

  prod-sync-e2e-run-cdiscount:
    needs: environment-setup
    if: ${{ needs.environment-setup.outputs.loaded-test-case == 'TC_004_e2e_cdiscount' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            build
            node_modules
          key: ${{ runner.os }}-node_modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-build-

      - name: Install root dependencies
        uses: bahmutov/npm-install@v1

      - name: Cypress run (all calling scenarios)
        uses: cypress-io/github-action@v4
        id: cypress-prod-sync-e2e-cdiscount
        with:
          install: false
          browser: electron
          headed: false
          spec: cypress/e2e/${{ needs.environment-setup.outputs.loaded-test-case }}_service/*.**

      - name: Create artifact package (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-cdiscount.conclusion == 'failure')
        run: tar -cf nonSyncedProducts.tar ./cache_data/nonSyncedProductVariants.json

      - name: Create artifact package (logs)
        if: always()
        run: tar -cf fullLogs.tar ./logs

      - name: Upload artifact (nonsynced product variants)
        if: always() && ( steps.cypress-prod-sync-e2e-cdiscount.conclusion == 'failure')
        uses: actions/upload-artifact@v3
        with:
          name: unsynced-product-variants-for-download
          path: nonSyncedProducts.tar
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload artifact (logs)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-mongo-logs-for-download
          path: fullLogs.tar
          retention-days: 30
          if-no-files-found: ignore





  
